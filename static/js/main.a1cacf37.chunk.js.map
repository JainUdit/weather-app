{"version":3,"sources":["redux-app/constants/actionConstants.ts","assets/weather-background.jpg","redux-app/components/Style.ts","redux-app/constants/imageConstants.ts","redux-app/services/utils.tsx","redux-app/components/Forecast.tsx","redux-app/containers/ConnectedWeather.tsx","redux-app/actions/WeatherActions.ts","redux-app/actions/ForecastActions.ts","redux-app/components/Weather.tsx","App.tsx","reportWebVitals.ts","redux-app/reducers/index.ts","redux-app/reducers/weatherReducer.ts","redux-app/reducers/forecastReducer.ts","redux-app/sagas/forecastSaga.ts","redux-app/sagas/weatherSaga.ts","redux-app/sagas/index.ts","redux-app/store/index.ts","index.tsx"],"names":["FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FALIURE","FETCH_FORECAST_REQUEST","FETCH_FORECAST_SUCCESS","FETCH_FORECAST_FALIURE","StyledWeatherWrapper","styled","weatherBg","StyledWeatherIcon","StyledInputGroup","InputGroup","StyledFormControl","FormControl","StyledWeatherDetails","Container","StyledForecastWrapper","StyledWeatherForecastIcon","StyledCardWrapper","Card","weatherImages","weatherImageSelection","weather","src","alt","isTablet","window","matchMedia","matches","Forecast","coordinates","forecast","callForecastData","forecastData","isForecastDataLoading","useState","index","setIndex","useEffect","lat","lon","handleSelect","selectedIndex","console","log","renderCarouselItem","start","end","className","hourly","slice","map","hourData","weatherIcon","main","hour","moment","dt","format","Body","temp","fluid","Spinner","animation","role","Carousel","variant","interval","indicators","activeIndex","onSelect","Item","ConnectedWeather","connect","state","dispatch","callWeatherData","city","type","payload","weatherRequest","forecastRequest","cityName","setCityName","weatherData","isWeatherDataLoading","placeholder","onChange","event","target","value","Button","onClick","Row","Col","lg","name","xs","Math","round","description","humidity","wind","speed","coord","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","errorWeatherData","error","errorForecastData","fetchForecastSaga","fetchForecastData","url","process","fetch","data","json","call","forecastResponse","put","toString","fetchWeatherSaga","fetchWeatherData","weatherResponse","rootSaga","all","takeLatest","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1cacf37.chunk.js","sourcesContent":["export const FETCH_WEATHER_REQUEST: string = 'FETCH_WEATHER_REQUEST';\nexport const FETCH_WEATHER_SUCCESS: string = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_FALIURE: string = 'FETCH_WEATHER_FALIURE';\n\nexport const FETCH_FORECAST_REQUEST: string = 'FETCH_FORECAST_REQUEST';\nexport const FETCH_FORECAST_SUCCESS: string = 'FETCH_FORECAST_SUCCESS';\nexport const FETCH_FORECAST_FALIURE: string = 'FETCH_FORECAST_FALIURE';","export default __webpack_public_path__ + \"static/media/weather-background.d5303fbf.jpg\";","import styled from '@emotion/styled';\nimport { Container, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport weatherBg from '../../assets/weather-background.jpg';\n\nexport const StyledWeatherWrapper = styled('div')`\n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n    background-image:url(${weatherBg});\n    backdrop-filter: blur(10px);\n    width: 100%;\n    height: 100vh;\n    font-family: 'Montserrat';\n`\n\nexport const StyledWeatherIcon = styled('div')`\n    img {\n        height: 150px;\n        @media (max-width: 800px) {\n            height: 100px;\n        }\n    }\n`\n\nexport const StyledInputGroupWrapper = styled(InputGroup)`\n    width: 70%;\n    justify-content: center;\n    margin-top: 40px;\n`\n\nexport const StyledInputGroup = styled(InputGroup)`\n    margin-top: 40px;\n    width: 70%;\n    @media (max-width: 800px) {\n        width: 80%;\n    }\n`\n\nexport const StyledFormControl = styled(FormControl)`\n    opacity: 0.5;\n    color: black;\n`\n\nexport const StyledWeatherDetails = styled(Container)`\n    color: darkslategrey;\n    padding-top: 60px;\n    width: 70%;\n    @media (max-width: 800px) {\n        padding: 10px;\n        width: 80%;\n    }\n\n    .weatherDetails {\n        @media (max-width: 800px) {\n            padding: 50px 0;\n        }\n    }\n    .cityName {\n        font-weight: 800;\n        font-size: 50px;\n        padding-top: 30px;\n        @media (max-width: 800px) {\n            font-size: 35px;\n        } \n    }\n    .day {\n        @media (max-width: 800px) {\n            font-size: 12px;\n        }\n    }\n    .temp {\n        font-size: 25px;\n        padding-top: 30px;\n        @media (max-width: 800px) {\n            font-size: 30px;\n            padding-top: 10px;\n        }\n    }\n    .description {\n        justify-content: center;\n        text-transform: capitalize;\n        margin-top: -30px;\n        font-size: 15px;\n        font-weight: 800;\n        @media (max-width: 800px) {\n            margin-top: 0;\n            font-size: 12px;\n        }\n    }\n    .humidity {\n        margin-top: 10px;\n        @media (max-width: 800px) {\n            font-size: 13px;\n        }\n    }\n    .wind {\n        @media (max-width: 800px) {\n            font-size: 13px;\n        }\n    }\n    .unit {\n        font-size: 13px;\n        @media (max-width: 800px) {\n            font-size: 11px;\n        }\n    }\n`\n\nexport const StyledForecastWrapper = styled('div')`\n    display: flex;\n    flex-direction: row;\n    width: 70%;\n    margin-top: 60px;\n\n    @media (max-width: 800px) {\n        width: 90%;\n    }\n    \n    .carousel {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }   \n    .carousel-inner {\n        width: 80%;\n    }\n    .card-body {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n\n    &.hide-left-icon {\n        .carousel-control-prev {\n            display: none;\n        }\n    }\n    &.hide-right-icon {\n        .carousel-control-next {\n            display: none;\n        }\n    }\n`\n\nexport const StyledWeatherForecastIcon = styled('div')`\n    img {\n        height: 80px;\n        @media (max-width: 800px) {\n            height: 50px;\n        }\n    }\n`\n\nexport const StyledCardWrapper = styled(Card)`\n    background-color: rgba(245, 245, 245, 0.7);\n    width: 120px;\n\n    @media (max-width: 800px) {\n        width: 80px;\n    }\n    .hour {\n        font-size: 15px;\n        @media (max-width: 800px) {\n            font-size: 13px;\n    }\n    }\n    .temprature {\n        font-size: 18px;\n        font-weight: 500;\n        @media (max-width: 800px) {\n            font-size: 15px;\n        }\n    }\n`","export const weatherImages = {\n    thunder: 'https://www.amcharts.com/wp-content/themes/amcharts4/css/img/icons/weather/animated/thunder.svg',\n    drizzle: 'https://www.amcharts.com/wp-content/themes/amcharts4/css/img/icons/weather/animated/rainy-4.svg',\n    rain: 'https://www.amcharts.com/wp-content/themes/amcharts4/css/img/icons/weather/animated/rainy-6.svg',\n    snow: 'https://www.amcharts.com/wp-content/themes/amcharts4/css/img/icons/weather/animated/snowy-5.svg',\n    sunny: 'https://www.amcharts.com/wp-content/themes/amcharts4/css/img/icons/weather/animated/day.svg',\n    clouds: 'https://www.amcharts.com/wp-content/themes/amcharts4/css/img/icons/weather/animated/cloudy-day-3.svg',\n}","import { weatherImages } from '../constants/imageConstants';\n\nexport const weatherImageSelection = (weather: string) => {\n    switch (weather) {\n        case 'Thunderstorm':\n            return <img src={weatherImages.thunder} alt='Thunder' />;\n        case 'Drizzle':\n            return <img src={weatherImages.drizzle} alt='Drizzle' />;\n        case 'Rain':\n            return <img src={weatherImages.rain} alt='Rain' />\n        case 'Snow':\n            return <img src={weatherImages.snow} alt='Snow' />\n        case 'Clear':\n            return <img src={weatherImages.sunny} alt='Clear' />\n        case 'Clouds':\n            return <img src={weatherImages.clouds} alt='Clouds' />\n\n        default:\n            return <img src={weatherImages.sunny} alt='Clear' />\n    }\n}\n\nexport const isMobile = () => typeof window !== 'undefined' && window.matchMedia(`(max-width: 767px)`).matches;\nexport const isTablet = () => typeof window !== 'undefined' && window.matchMedia(`(max-width: 991px)`).matches;","import { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport { Carousel, Card, Container, Spinner } from \"react-bootstrap\";\nimport { ICoordinates } from \"../interfaces/ICoordinates\";\nimport { IForecastHourlyData } from \"../interfaces/IForecastHourlyData\";\nimport { IForecastWrapperState } from \"../interfaces/IForecastWrapperState\";\nimport { isTablet, weatherImageSelection } from \"../services/utils\";\nimport { StyledForecastWrapper, StyledWeatherForecastIcon, StyledCardWrapper } from \"./Style\";\n\ninterface IProps {\n    coordinates: ICoordinates\n    forecast: IForecastWrapperState;\n    callForecastData: (coordinates: ICoordinates) => void;\n}\n\nexport const Forecast = ({ coordinates, forecast, callForecastData }: IProps): React.ReactElement => {\n    const { forecastData, isForecastDataLoading } = forecast;\n    const [index, setIndex] = useState<number>(0);\n\n    useEffect(() => {\n        coordinates && coordinates.lat && coordinates.lon && callForecastData(coordinates);\n    }, [coordinates])\n\n    const handleSelect = (selectedIndex: number) => {\n        console.log(selectedIndex);\n        setIndex(selectedIndex);\n    };\n\n    const renderCarouselItem = (start: number, end: number): React.ReactElement => (\n        <div className=\"d-flex flex-row\">\n            {forecastData?.hourly?.slice(start, end)?.map((hourData: IForecastHourlyData) => {\n                let weatherIcon = weatherImageSelection(hourData?.weather?.[0].main);\n                let hour = moment(hourData.dt * 1000).format(\"hh a\");\n                return (\n                    <StyledCardWrapper key={hourData?.dt}>\n                        <Card.Body>\n                            <span className=\"hour\">{hour}</span>\n                            <StyledWeatherForecastIcon>{weatherIcon}</StyledWeatherForecastIcon>\n                            <span className=\"temprature\">{hourData.temp}&deg;</span>\n                        </Card.Body>\n                    </StyledCardWrapper>)\n            })}\n        </div>\n    )\n\n    return (\n        <StyledForecastWrapper className={`${index === 0 ? 'hide-left-icon' : ''} ${index === (isTablet() ? 5 : 2) ? 'hide-right-icon' : ''}`}>\n            {isForecastDataLoading\n                ?\n                <Container fluid className=\"d-flex justify-content-center align-items-center h-100\">\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner>\n                </Container>\n                :\n                <>\n                    {isTablet()\n                        ?\n                        <Carousel variant=\"dark\" interval={null} indicators={false} activeIndex={index} onSelect={handleSelect}>\n                            <Carousel.Item>{renderCarouselItem(0, 4)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(4, 8)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(8, 12)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(12, 16)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(16, 20)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(20, 24)}</Carousel.Item>\n                        </Carousel>\n                        :\n                        <Carousel variant=\"dark\" interval={null} indicators={false} activeIndex={index} onSelect={handleSelect}>\n                            <Carousel.Item>{renderCarouselItem(0, 8)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(8, 16)}</Carousel.Item>\n                            <Carousel.Item>{renderCarouselItem(16, 24)}</Carousel.Item>\n                        </Carousel>\n                    }\n                </>\n            }\n        </StyledForecastWrapper >\n    )\n}","import { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { forecastRequest } from \"../actions/ForecastActions\";\nimport { weatherRequest } from \"../actions/WeatherActions\";\nimport { Weather } from \"../components/Weather\";\nimport { ICoordinates } from \"../interfaces/ICoordinates\";\nimport { IForecastWrapperState } from \"../interfaces/IForecastWrapperState\";\nimport { IWeatherGlobalState } from \"../interfaces/IWeatherGlobalState\";\nimport { IWeatherWrapperState } from \"../interfaces/IWeatherWrapperState\";\n\ninterface IStateProps {\n    weather: IWeatherWrapperState;\n    forecast: IForecastWrapperState;\n}\n\ninterface IDispatchProps {\n    callWeatherData: (city: string) => void;\n    callForecastData: (coordinates: ICoordinates) => void;\n}\n\nconst mapStateToProps = (state: IWeatherGlobalState): IStateProps => ({\n    weather: state.weather,\n    forecast: state.forecast\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch): IDispatchProps => ({\n    callWeatherData: (city: string) => dispatch(weatherRequest(city)),\n    callForecastData: (coordinates: ICoordinates) => dispatch(forecastRequest(coordinates)),\n})\n\nexport const ConnectedWeather: any = connect(mapStateToProps, mapDispatchToProps)(Weather);","import { BaseAction } from \"./BaseAction\";\nimport { FETCH_WEATHER_FALIURE, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS } from \"../constants/actionConstants\";\nimport { IWeatherState } from \"../interfaces/IWeatherState\";\n\n/**\n * The interface here defines type for weather actions.\n */\nexport interface IWeatherRequestAction extends BaseAction<{ city: string }> { }\nexport interface IWeatherSuccessAction extends BaseAction<IWeatherState> { }\nexport interface IWeatherErrorAction extends BaseAction<{ error: string }> { }\n\nexport const weatherRequest: (city: string) => IWeatherRequestAction = (city) => ({\n    type: FETCH_WEATHER_REQUEST,\n    payload: { city }\n});\n\nexport const weatherSuccess: (weatherData: IWeatherState) => IWeatherSuccessAction = (weatherData) => ({\n    type: FETCH_WEATHER_SUCCESS,\n    payload: weatherData\n});\n\nexport const weatherError: (error: string) => IWeatherErrorAction = (error) => ({\n    type: FETCH_WEATHER_FALIURE,\n    payload: { error }\n});\n","import { BaseAction } from \"./BaseAction\";\nimport { FETCH_FORECAST_FALIURE, FETCH_FORECAST_REQUEST, FETCH_FORECAST_SUCCESS } from \"../constants/actionConstants\";\nimport { IForecastState } from \"../interfaces/IForecastState\";\nimport { ICoordinates } from \"../interfaces/ICoordinates\";\n\n/**\n * The interface here defines type for forecast actions.\n */\nexport interface IForecastRequestAction extends BaseAction<{ coordinates: ICoordinates }> { }\nexport interface IForecastSuccessAction extends BaseAction<IForecastState> { }\nexport interface IForecastErrorAction extends BaseAction<{ error: string }> { }\n\nexport const forecastRequest: (coordinates: ICoordinates) => IForecastRequestAction = (coordinates) => ({\n    type: FETCH_FORECAST_REQUEST,\n    payload: { coordinates }\n});\n\nexport const forecastSuccess: (forecastData: IForecastState) => IForecastSuccessAction = (forecastData) => ({\n    type: FETCH_FORECAST_SUCCESS,\n    payload: forecastData\n});\n\nexport const forecastError: (error: string) => IForecastErrorAction = (error) => ({\n    type: FETCH_FORECAST_FALIURE,\n    payload: { error }\n});\n","import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { Button, Container, Spinner, Row, Col } from 'react-bootstrap';\nimport { IWeatherWrapperState } from '../interfaces/IWeatherWrapperState';\nimport { StyledWeatherIcon, StyledWeatherWrapper, StyledInputGroup, StyledFormControl, StyledWeatherDetails } from './Style';\nimport { IForecastWrapperState } from '../interfaces/IForecastWrapperState';\nimport { ICoordinates } from '../interfaces/ICoordinates';\nimport { Forecast } from './Forecast';\nimport { weatherImageSelection } from '../services/utils';\n\ninterface IProps {\n    weather: IWeatherWrapperState;\n    callWeatherData: (city: string) => void;\n    forecast: IForecastWrapperState;\n    callForecastData: (coordinates: ICoordinates) => void;\n}\n\nexport const Weather = ({ weather, callWeatherData, forecast, callForecastData }: IProps): React.ReactElement => {\n    const [cityName, setCityName] = useState('London');\n    const { weatherData, isWeatherDataLoading } = weather;\n    useEffect(() => {\n        callWeatherData(cityName);\n    }, []);\n\n    let weatherIcon = weatherImageSelection(weatherData?.weather?.[0].main);\n\n    return (\n        <StyledWeatherWrapper className=\"d-flex flex-column align-items-center\">\n            <StyledInputGroup>\n                <StyledFormControl\n                    placeholder=\"City name\"\n                    aria-label=\"City name\"\n                    onChange={(event) => setCityName(event.target.value)}\n                />\n                <Button variant=\"secondary\" onClick={() => callWeatherData(cityName)}   >\n                    Button\n                </Button>\n            </StyledInputGroup>\n            {isWeatherDataLoading\n                ?\n                <Container fluid className=\"d-flex justify-content-center align-items-center h-100\">\n                    <Spinner animation=\"border\" role=\"status\">\n                        <span className=\"visually-hidden\">Loading...</span>\n                    </Spinner>\n                </Container>\n                :\n                <>\n                    <StyledWeatherDetails fluid className=\"d-flex\">\n                        <Row className=\"w-100\">\n                            <Col lg={6} className=\"d-flex flex-column\">\n                                <span className=\"cityName\">{weatherData?.name}</span>\n                                <span className=\"day\">{moment().format('LL')}</span>\n                                <span className=\"day\">{moment().format('dddd')}</span>\n                            </Col>\n                            <Col lg={6} className=\"weatherDetails\">\n                                <Row className=\"w-100 align-items-lg-end\">\n                                    <Col xs={6} lg={12} className=\"d-flex flex-row align-items-center justify-content-lg-end\">\n                                        <StyledWeatherIcon>{weatherIcon}</StyledWeatherIcon>\n                                        <span className=\"temp\">{Math.round(weatherData?.main?.temp)}&deg;</span>\n                                    </Col>\n                                    <Col xs={6} lg={12} className=\"d-flex align-items-end justify-content-lg-end justify-content-center p-0\">\n                                        <div className=\"d-flex flex-column align-items-lg-start align-items-xs-end justify-content-lg-start justify-content-center\">\n                                            <span className=\"description\">{weatherData?.weather?.[0]?.description}</span>\n                                            <span className=\"humidity\">Humidity: {weatherData?.main?.humidity} <span className=\"unit\">%</span></span>\n                                            <span className=\"wind\">Wind: {weatherData?.wind?.speed} <span className=\"unit\">km/h</span></span>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                    </StyledWeatherDetails>\n                    <Forecast forecast={forecast} callForecastData={callForecastData} coordinates={weatherData?.coord} />\n                </>\n            }\n        </StyledWeatherWrapper>\n    )\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ConnectedWeather } from './redux-app/containers/ConnectedWeather';\n\nconst App = (): React.ReactElement => {\n  return (\n    <Container fluid className='p-0'>\n      <ConnectedWeather />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport { forecastReducer } from \"./forecastReducer\";\nimport { weatherReducer } from \"./weatherReducer\";\n\nexport const rootReducer = combineReducers({\n    weather: weatherReducer,\n    forecast: forecastReducer\n})","import { Reducer } from \"redux\";\nimport { BaseAction } from \"../actions/BaseAction\";\nimport { FETCH_WEATHER_FALIURE, FETCH_WEATHER_REQUEST, FETCH_WEATHER_SUCCESS } from \"../constants/actionConstants\";\nimport { IWeatherWrapperState } from \"../interfaces/IWeatherWrapperState\";\n\nexport const weatherReducer: Reducer<IWeatherWrapperState, BaseAction<any>> = (\n    state: IWeatherWrapperState = {} as IWeatherWrapperState,\n    action: BaseAction<any>\n): IWeatherWrapperState => {\n    switch (action.type) {\n        case FETCH_WEATHER_REQUEST:\n            return { ...state, isWeatherDataLoading: true }\n        case FETCH_WEATHER_SUCCESS:\n            return { ...state, weatherData: action.payload, isWeatherDataLoading: false };\n        case FETCH_WEATHER_FALIURE:\n            return { ...state, errorWeatherData: action.payload.error, isWeatherDataLoading: false };\n\n        default:\n            return state;\n    }\n}","import { Reducer } from \"redux\";\nimport { BaseAction } from \"../actions/BaseAction\";\nimport { FETCH_FORECAST_FALIURE, FETCH_FORECAST_REQUEST, FETCH_FORECAST_SUCCESS } from \"../constants/actionConstants\";\nimport { IForecastWrapperState } from \"../interfaces/IForecastWrapperState\";\n\nexport const forecastReducer: Reducer<IForecastWrapperState, BaseAction<any>> = (\n    state: IForecastWrapperState = {} as IForecastWrapperState,\n    action: BaseAction<any>\n): IForecastWrapperState => {\n    switch (action.type) {\n        case FETCH_FORECAST_REQUEST:\n            return { ...state, isForecastDataLoading: true }\n        case FETCH_FORECAST_SUCCESS:\n            return { ...state, forecastData: action.payload, isForecastDataLoading: false };\n        case FETCH_FORECAST_FALIURE:\n            return { ...state, errorForecastData: action.payload.error, isForecastDataLoading: false };\n\n        default:\n            return state;\n    }\n}","import { call, put } from \"@redux-saga/core/effects\";\nimport { forecastError, forecastSuccess, IForecastRequestAction } from \"../actions/ForecastActions\";\nimport { ICoordinates } from \"../interfaces/ICoordinates\";\nimport { IForecastState } from \"../interfaces/IForecastState\";\n\nconst fetchForecastData = (coord: ICoordinates): Promise<Response> => {\n    const url = `${process.env.REACT_APP_API_URL}/onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=currently,minutely,daily,alerts&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\n    return fetch(url).then(data => data.json());\n}\n\nexport function* fetchForecastSaga(action: IForecastRequestAction): any {\n    try {\n        const forecastResponse: IForecastState = yield call(fetchForecastData, action.payload.coordinates);\n        yield put(forecastSuccess(forecastResponse));\n    } catch (error: any) {\n        yield put(forecastError(error.toString()));\n    }\n}","import { call, put } from \"@redux-saga/core/effects\";\nimport { IWeatherRequestAction, weatherError, weatherSuccess } from \"../actions/WeatherActions\";\nimport { IWeatherState } from \"../interfaces/IWeatherState\";\n\nconst fetchWeatherData = (city: string): Promise<Response> => {\n    const url = `${process.env.REACT_APP_API_URL}/weather/?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\n    return fetch(url).then(data => data.json());\n}\n\nexport function* fetchWeatherSaga(action: IWeatherRequestAction): any {\n    try {\n        const weatherResponse: IWeatherState = yield call(fetchWeatherData, action.payload.city);\n        yield put(weatherSuccess(weatherResponse));\n    } catch (error: any) {\n        yield put(weatherError(error.toString()));\n    }\n}","import { all, takeLatest } from \"@redux-saga/core/effects\";\nimport { FETCH_FORECAST_REQUEST, FETCH_WEATHER_REQUEST } from \"../constants/actionConstants\";\nimport { fetchForecastSaga } from \"./forecastSaga\";\nimport { fetchWeatherSaga } from \"./weatherSaga\";\n\nexport function* rootSaga() {\n    yield all([\n        takeLatest(FETCH_WEATHER_REQUEST, fetchWeatherSaga),\n        takeLatest(FETCH_FORECAST_REQUEST, fetchForecastSaga)\n    ])\n}","import createSagaMiddleware, { SagaMiddleware } from \"@redux-saga/core\";\nimport { createStore, applyMiddleware, Store, compose } from \"redux\";\nimport { BaseAction } from \"../actions/BaseAction\";\nimport { IWeatherGlobalState } from \"../interfaces/IWeatherGlobalState\";\nimport { rootReducer } from \"../reducers\";\nimport { rootSaga } from \"../sagas\";\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst initialState: IWeatherGlobalState = {} as IWeatherGlobalState;\n\nconst sagaMiddleware: SagaMiddleware = createSagaMiddleware();\n\nconst store: Store<any, BaseAction<any>> = createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux-app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}